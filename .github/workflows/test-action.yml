name: Build libheif
run-name: ${{ github.actor }} is building libheif
on:
    push:
        branches:
            - cyro/feat/libheif-build-actions

# on: workflow_dispatch

jobs:
    Build-Linux:
        runs-on: ubuntu-latest
        
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - run: echo "${{ github.repository }} cloned"

            - name: Make build directory
              run: mkdir build

            - name: Create output directory variable
              id: buildoutput
              run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            - name: Configure CMake
              working-directory: ${{ steps.buildoutput.outputs.build-output-dir }}
              run: cmake --preset=release-noplugins ..

            - name: Build libheif
              working-directory: ${{ steps.buildoutput.outputs.build-output-dir }}
              run: make
            
            - name: Archive and put a pretty bow on it
              uses: actions/upload-artifact@v4
              with:
                name: libheif-linux
                path: ${{ steps.buildoutput.outputs.build-output-dir }}/libheif
    
    Build-Windows:
        runs-on: windows-latest
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - run: echo "${{ github.repository }} cloned"

            - name: Make build directory
              run: mkdir build

            - name: Create output directory variable
              id: buildoutput
              run: echo "build-output-dir=${{ github.workspace }}/build" >> "$Env:GITHUB_OUTPUT"

            - uses: ilammy/setup-nasm@v1
            - uses: seanmiddleditch/gha-setup-ninja@master
            - name: Grab AOM for basic AVIF encoding/decoding
              working-directory: ${{ github.workspace }}/third-party
              run: |
                ./aom.cmd
                dir ./aom/build.libavif

            - name: Configure CMake
              working-directory: ${{ steps.buildoutput.outputs.build-output-dir }}
              run: cmake --preset=release-noplugins ..

            - name: Build libheif
              working-directory: ${{ steps.buildoutput.outputs.build-output-dir }}
              run: cmake --build . --config Release
            
            - name: Archive and put a pretty bow on it
              uses: actions/upload-artifact@v4
              with:
                name: libheif-windows
                path: ${{ steps.buildoutput.outputs.build-output-dir }}/libheif/Release

